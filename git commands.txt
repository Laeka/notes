-¿Que es git y para qué sirve?
Sistema de control de versiones
Trabajo en equipo
Listado y fecha de cambios (commits)
Volver atrás en el tiempo restablecer cambios
Ramas de desarrollo
Mezclar cambios entre compañeros

--Configurar usuario
git config –global user.name “nombre” : Configurar nombre
git config –global user.email “email”: Configurar email
git config –list: Listar usuarios
git status: Muestra la branch, el commit y los archivos que faltan agregar

--Ayuda en git
git help comando: Manual del comando

--Crear repositorio
Entrar a la carpeta del proyecto
git init: Inicializar git

--Clonar repositorio
git clone ruta “nombre carpeta”: Clona el proyecto de la ruta a la carpeta asignada
rm –rf nombre carpeta:  Borrar carpeta

--Espacio de trabajo
git add: Añadir archivos para hacer commit
git checkout archivo: Regresar el archivo al anterior commit
git diff archivo: Muestra las diferencias en los cambios del archivo
  
--Gitignore
Crear fichero gitignore: Archivo que no serán subidos

--Commit y versiones
git commit –m “Nombre”: Crear en la rama que se encuentre una nueva versión
git log –oneline: Muestra el commit realizado
git log: Ver quien realizo el commit, la fecha…

--Reset y checkout
git reset HEAD archivo || . : Regresar los cambios del archivo
git checkout archivo: Regresar los cambios del archivo

--Deshacer commit
git reset –-hard HEAD~commit: Eliminar el anterior commit y regresar al commit indicado
git reset –hard commit: Eliminar el anterior commit y regresar al commit indicado

--Volver a un commit anterior
git checkout commit: Regresar al commit indicado

--Buscar commits
git log –grep=palabra: Busca el commit que tenga la palabra en su descripción
git log –S “cambio”: Busca el commit que tenga el cambio realizado

--Ramas
git branch: Muestra las ramas y señala en la que te encuentras
git branch nombre: Crea la rama nombre
git checkout nombre: Cambiar de rama
git branch –D nombre: Forzar borrado de la rama nombre
git merge branchNombre: Llevar cambios a la branch en la que se encuentra

--Stash
git stash: Guardar los cambios en una memoria temporal que se puede recuperar más adelante
git stash show: Mostrar los cambios que tiene el stash
git stash pop: Recupera los cambios guardados en la memoria
git stash clear: Borra los cambios guardados en el stash

--Cherry Pick
git cherry-pick idCommit: Traer un commit en especifico de otra rama
--Como resolver conflictos
Borrar los datos en conflicto

--Repositorios remotos y GitHub
Crear repositorio en github
Echo “contenido” >> README.md: Crear archivo readme
git init
git add README.md
git commit –m “descripción”
git remote add origin ruta repositorio remoto
git push origin master: Subir los cambios al repositorio remoto
git fetch –-all: Bajar las ramas que tienes en remoto
git pull origin branch: Bajar los cambios de la rama
git remote set-url origin url:: cambiar de url
git remote -v: verificar la url
rm -rf .git: borrar git


FEATURE BRANCH::
$ git checkout -b feature-id master                 // creates a local branch for the new feature
$ git push origin feature-id                        // makes the new feature remotely available

$ git merge master                                  // merges changes from master into feature branch

$ git checkout master                               // change to the master branch  
$ git merge --no-ff feature-id                      // makes sure to create a commit object during merge
$ git push origin master                            // push merge changes
$ git push origin :feature-id                       // deletes the remote branch
*************************************************************************************************************************
BUG BRANCH::
$ git checkout -b bug-id master                     // creates a local branch for the new bug
$ git push origin bug-id                            // makes the new bug remotely available

$ git merge master                                  // merges changes from master into bug branch

$ git checkout master                               // change to the master branch  
$ git merge --no-ff bug-id                          // makes sure to create a commit object during merge
$ git push origin master                            // push merge changes
$ git push origin :bug-id                           // deletes the remote branch
*************************************************************************************************************************
HOTFIXES BRANCHES
$ git checkout -b hotfix-id stable                  // creates a local branch for the new hotfix
$ git push origin hotfix-id                         // makes the new hotfix remotely available

$ git checkout stable                               // change to the stable branch
$ git merge --no-ff hotfix-id                       // forces creation of commit object during merge
$ git tag -a <tag>                                  // tags the fix
$ git push origin stable --tags                     // push tag changes

$ git checkout master                               // change to the master branch
$ git merge --no-ff hotfix-id                       // forces creation of commit object during merge
$ git push origin master                            // push merge changes
$ git push origin :hotfix-id                        // deletes the remote branch
